use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint,
    entrypoint::ProgramResult,
    program_error::ProgramError,
    pubkey::Pubkey,
    msg,
    clock::Clock,
    sysvar::{Sysvar, clock::Clock, rent::Rent},
};
use spl_token::{
    instruction::{initialize_mint, initialize_account, mint_to, transfer},
    state::{Account as TokenAccount, Mint},
};
use chrono::NaiveDateTime;
use std::str::FromStr;

#[repr(u32)]
#[derive(Debug, PartialEq)]
pub enum CustomError {
    NotFirstOfMonth = 1,
    InsufficientAccounts = 2,
    InvalidDestinationAccount = 3,
    InsufficientTreasuryBalance = 4,
    UnauthorizedAuthority = 5,
    AccountNotRentExempt = 6,
}

impl From<CustomError> for ProgramError {
    fn from(e: CustomError) -> Self {
        ProgramError::Custom(e as u32)
    }
}

entrypoint!(process_instruction);

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    let mut accounts_iter = accounts.iter();

    // Parse accounts
    let authority = next_account_info(&mut accounts_iter)?;
    let token_mint = next_account_info(&mut accounts_iter)?;
    let source_account = next_account_info(&mut accounts_iter)?;
    let automated_wallet = next_account_info(&mut accounts_iter)?;
    let dest_accounts: Vec<&AccountInfo> = accounts_iter.collect();
    let token_program = next_account_info(&mut accounts_iter)?;

    // Validate authority
    validate_authority(authority)?;

    if token_program.key != &spl_token::id() {
        msg!("Incorrect token program ID.");
        return Err(ProgramError::IncorrectProgramId);
    }

    if instruction_data.is_empty() {
        initialize_mint_logic(token_mint, automated_wallet)?;
        return Ok(());
    }

    validate_dest_accounts(&dest_accounts)?;
    validate_source_account(source_account, token_mint)?;
    validate_rent_exemption(source_account, &dest_accounts)?;
    validate_distribution_day()?;

    distribute_tokens(token_mint, source_account, automated_wallet, &dest_accounts)?;
    msg!("Tokens successfully distributed to all accounts based on wealth classes.");
    Ok(())
}

fn validate_authority(authority: &AccountInfo) -> ProgramResult {
    let expected_authority_pubkey = Pubkey::from_str("EXPECTED_AUTHORITY_PUBLIC_KEY").unwrap();
    if !authority.is_signer || authority.key != &expected_authority_pubkey {
        msg!("Unauthorized authority account.");
        return Err(CustomError::UnauthorizedAuthority.into());
    }
    Ok(())
}

fn initialize_mint_logic(token_mint: &AccountInfo, automated_wallet: &AccountInfo) -> ProgramResult {
    let decimals: u8 = 6;
    let mint_authority = automated_wallet.key;
    let freeze_authority = None;

    let init_mint_ix = initialize_mint(
        &spl_token::id(),
        token_mint.key,
        mint_authority,
        freeze_authority,
        decimals,
    )?;

    solana_program::program::invoke(
        &init_mint_ix,
        &[token_mint.clone(), automated_wallet.clone()]
    )?;

    let total_supply: u64 = 1_000_000_000 * 10_u64.pow(decimals as u32);

    let mint_to_ix = mint_to(
        &spl_token::id(),
        token_mint.key,
        automated_wallet.key,
        automated_wallet.key,
        &[],
        total_supply,
    )?;

    solana_program::program::invoke(
        &mint_to_ix,
        &[token_mint.clone(), automated_wallet.clone()]
    )?;

    msg!("Token mint initialized successfully, and total supply minted to the automated wallet.");
    Ok(())
}

fn validate_dest_accounts(dest_accounts: &[&AccountInfo]) -> ProgramResult {
    if dest_accounts.is_empty() || dest_accounts.len() < 5 {
        msg!("Insufficient destination accounts to distribute tokens.");
        return Err(CustomError::InsufficientAccounts.into());
    }
    Ok(())
}

fn validate_source_account(source_account: &AccountInfo, token_mint: &AccountInfo) -> ProgramResult {
    let source_account_info = TokenAccount::unpack(&source_account.try_borrow_data()?)?;
    if source_account_info.mint != *token_mint.key {
        msg!("Source account mint does not match the token mint.");
        return Err(ProgramError::InvalidArgument);
    }
    Ok(())
}

fn validate_rent_exemption(source_account: &AccountInfo, dest_accounts: &[&AccountInfo]) -> ProgramResult {
    let rent = Rent::get()?;
    if !rent.is_exempt(source_account.lamports(), source_account.data_len()) {
        msg!("Source account is not rent-exempt.");
        return Err(CustomError::AccountNotRentExempt.into());
    }
    for dest_account in dest_accounts {
        if !rent.is_exempt(dest_account.lamports(), dest_account.data_len()) {
            msg!("Destination account is not rent-exempt.");
            return Err(CustomError::AccountNotRentExempt.into());
        }
    }
    Ok(())
}

fn validate_distribution_day() -> ProgramResult {
    let clock = Clock::get()?;
    let current_time = NaiveDateTime::from_timestamp_opt(clock.unix_timestamp, 0)
        .ok_or(ProgramError::InvalidArgument)?;
    let day_of_month = current_time.day();
    if day_of_month != 1 {
        msg!("Token distribution can only be executed on the 1st of the month.");
        return Err(CustomError::NotFirstOfMonth.into());
    }
    Ok(())
}

fn distribute_tokens(
    token_mint: &AccountInfo,
    source_account: &AccountInfo,
    automated_wallet: &AccountInfo,
    dest_accounts: &[&AccountInfo],
) -> ProgramResult {
    let token_mint_info = Mint::unpack(&token_mint.try_borrow_data()?)?;
    let total_supply = token_mint_info.supply;

    let class_percentages = [5000, 2000, 2000, 800, 200];

    for (i, dest_account) in dest_accounts.iter().enumerate() {
        let class_percentage = class_percentages[i % class_percentages.len()];
        let token_amount = total_supply
            .checked_mul(class_percentage as u64)
            .and_then(|v| v.checked_div(10_000))
            .ok_or(ProgramError::ArithmeticOverflow)?;

        let transfer_instruction = transfer(
            &spl_token::id(),
            source_account.key,
            dest_account.key,
            automated_wallet.key,
            &[],
            token_amount,
        )?;

        solana_program::program::invoke(
            &transfer_instruction,
            &[source_account.clone(), dest_account.clone(), automated_wallet.clone()],
        )?;
    }
    Ok(())
}
